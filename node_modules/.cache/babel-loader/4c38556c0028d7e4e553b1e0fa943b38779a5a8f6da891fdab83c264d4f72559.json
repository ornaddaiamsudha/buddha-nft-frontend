{"ast":null,"code":"var _jsxFileName = \"/Users/natty/Downloads/buddha/frontend/src/contexts/WalletContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WalletContext = /*#__PURE__*/createContext();\nexport const WalletProvider = ({\n  children\n}) => {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n\n  // Automatically connect on app load\n  useEffect(() => {\n    const initWallet = async () => {\n      if (window.ethereum) {\n        try {\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          await provider.send(\"eth_requestAccounts\", []);\n          const signer = provider.getSigner();\n          const address = await signer.getAddress();\n          setAccount(address);\n          setProvider(provider);\n          console.log(\"✅ Wallet connected:\", address);\n        } catch (err) {\n          console.warn(\"⚠️ Wallet connection rejected or failed:\", err);\n        }\n      } else {\n        alert(\"Please install MetaMask to use this app.\");\n      }\n    };\n    initWallet();\n  }, []);\n\n  // Manual connect function (if needed by a button)\n  const connectWallet = async () => {\n    if (!window.ethereum) {\n      alert(\"MetaMask not installed.\");\n      return;\n    }\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const address = await signer.getAddress();\n      setAccount(address);\n      setProvider(provider);\n      console.log(\"✅ Wallet manually connected:\", address);\n    } catch (err) {\n      console.warn(\"⚠️ Manual wallet connection failed:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: {\n      account,\n      provider,\n      connectWallet\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletProvider, \"SbU3J6fVKzllcYE8AWNC0h6VrNQ=\");\n_c = WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","ethers","jsxDEV","_jsxDEV","WalletContext","WalletProvider","children","_s","account","setAccount","provider","setProvider","initWallet","window","ethereum","providers","Web3Provider","send","signer","getSigner","address","getAddress","console","log","err","warn","alert","connectWallet","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/natty/Downloads/buddha/frontend/src/contexts/WalletContext.jsx"],"sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\n\nexport const WalletContext = createContext();\n\nexport const WalletProvider = ({ children }) => {\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n\n  // Automatically connect on app load\n  useEffect(() => {\n    const initWallet = async () => {\n      if (window.ethereum) {\n        try {\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          await provider.send(\"eth_requestAccounts\", []);\n          const signer = provider.getSigner();\n          const address = await signer.getAddress();\n          setAccount(address);\n          setProvider(provider);\n          console.log(\"✅ Wallet connected:\", address);\n        } catch (err) {\n          console.warn(\"⚠️ Wallet connection rejected or failed:\", err);\n        }\n      } else {\n        alert(\"Please install MetaMask to use this app.\");\n      }\n    };\n\n    initWallet();\n  }, []);\n\n  // Manual connect function (if needed by a button)\n  const connectWallet = async () => {\n    if (!window.ethereum) {\n      alert(\"MetaMask not installed.\");\n      return;\n    }\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const address = await signer.getAddress();\n      setAccount(address);\n      setProvider(provider);\n      console.log(\"✅ Wallet manually connected:\", address);\n    } catch (err) {\n      console.warn(\"⚠️ Manual wallet connection failed:\", err);\n    }\n  };\n\n  return (\n    <WalletContext.Provider value={{ account, provider, connectWallet }}>\n      {children}\n    </WalletContext.Provider>\n  );\n};"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,OAAO,MAAMC,aAAa,gBAAGN,aAAa,CAAC,CAAC;AAE5C,OAAO,MAAMO,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMY,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAIC,MAAM,CAACC,QAAQ,EAAE;QACnB,IAAI;UACF,MAAMJ,QAAQ,GAAG,IAAIT,MAAM,CAACc,SAAS,CAACC,YAAY,CAACH,MAAM,CAACC,QAAQ,CAAC;UACnE,MAAMJ,QAAQ,CAACO,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;UAC9C,MAAMC,MAAM,GAAGR,QAAQ,CAACS,SAAS,CAAC,CAAC;UACnC,MAAMC,OAAO,GAAG,MAAMF,MAAM,CAACG,UAAU,CAAC,CAAC;UACzCZ,UAAU,CAACW,OAAO,CAAC;UACnBT,WAAW,CAACD,QAAQ,CAAC;UACrBY,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,OAAO,CAAC;QAC7C,CAAC,CAAC,OAAOI,GAAG,EAAE;UACZF,OAAO,CAACG,IAAI,CAAC,0CAA0C,EAAED,GAAG,CAAC;QAC/D;MACF,CAAC,MAAM;QACLE,KAAK,CAAC,0CAA0C,CAAC;MACnD;IACF,CAAC;IAEDd,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMe,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAACd,MAAM,CAACC,QAAQ,EAAE;MACpBY,KAAK,CAAC,yBAAyB,CAAC;MAChC;IACF;IACA,IAAI;MACF,MAAMhB,QAAQ,GAAG,IAAIT,MAAM,CAACc,SAAS,CAACC,YAAY,CAACH,MAAM,CAACC,QAAQ,CAAC;MACnE,MAAMJ,QAAQ,CAACO,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;MAC9C,MAAMC,MAAM,GAAGR,QAAQ,CAACS,SAAS,CAAC,CAAC;MACnC,MAAMC,OAAO,GAAG,MAAMF,MAAM,CAACG,UAAU,CAAC,CAAC;MACzCZ,UAAU,CAACW,OAAO,CAAC;MACnBT,WAAW,CAACD,QAAQ,CAAC;MACrBY,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEH,OAAO,CAAC;IACtD,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZF,OAAO,CAACG,IAAI,CAAC,qCAAqC,EAAED,GAAG,CAAC;IAC1D;EACF,CAAC;EAED,oBACErB,OAAA,CAACC,aAAa,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAAErB,OAAO;MAAEE,QAAQ;MAAEiB;IAAc,CAAE;IAAArB,QAAA,EACjEA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAAC1B,EAAA,CAnDWF,cAAc;AAAA6B,EAAA,GAAd7B,cAAc;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}