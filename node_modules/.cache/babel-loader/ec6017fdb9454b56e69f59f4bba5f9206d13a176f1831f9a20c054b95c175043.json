{"ast":null,"code":"export async function uploadToIPFS(form, files) {\n  const API_KEY = 'c63457916daf1874e516';\n  const API_SECRET = '27e213bcbcd8d4da78ddcc069d56515ff7770267388d93ac6bb467634bdb7175';\n  try {\n    // Upload image file to Pinata\n    const imageFile = files[0];\n    const imageFormData = new FormData();\n    imageFormData.append('file', imageFile);\n    const imageUploadRes = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {\n      method: 'POST',\n      headers: {\n        pinata_api_key: API_KEY,\n        pinata_secret_api_key: API_SECRET\n      },\n      body: imageFormData\n    });\n    if (!imageUploadRes.ok) {\n      const err = await imageUploadRes.json();\n      throw new Error(`Image upload failed: ${err.error}`);\n    }\n    const imageData = await imageUploadRes.json();\n    const imageCID = imageData.IpfsHash;\n    const imageURI = `ipfs://${imageCID}`;\n    const imageGatewayURL = `https://gateway.pinata.cloud/ipfs/${imageCID}`;\n\n    // Build metadata JSON object\n    const metadata = {\n      name: form.name,\n      description: form.description,\n      image: imageURI,\n      // stored as ipfs:// but viewable via gateway\n      attributes: [{\n        trait_type: \"Year\",\n        value: form.year\n      }, {\n        trait_type: \"Frame\",\n        value: form.frame\n      }]\n    };\n\n    // Upload metadata JSON to Pinata\n    const metadataFormData = new FormData();\n    const metadataBlob = new Blob([JSON.stringify(metadata)], {\n      type: 'application/json'\n    });\n    metadataFormData.append('file', metadataBlob, 'metadata.json');\n    const metadataUploadRes = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {\n      method: 'POST',\n      headers: {\n        pinata_api_key: API_KEY,\n        pinata_secret_api_key: API_SECRET\n      },\n      body: metadataFormData\n    });\n    if (!metadataUploadRes.ok) {\n      const err = await metadataUploadRes.json();\n      throw new Error(`Metadata upload failed: ${err.error}`);\n    }\n    const metadataData = await metadataUploadRes.json();\n    const metadataCID = metadataData.IpfsHash;\n    const metadataGatewayURL = `https://gateway.pinata.cloud/ipfs/${metadataCID}`;\n    console.log(\"Image IPFS:\", imageGatewayURL);\n    console.log(\"Metadata IPFS:\", metadataGatewayURL);\n    return metadataGatewayURL; // tokenURI to be used in mint()\n  } catch (err) {\n    console.error(\"IPFS Upload Error:\", err);\n    throw err;\n  }\n}","map":{"version":3,"names":["uploadToIPFS","form","files","API_KEY","API_SECRET","imageFile","imageFormData","FormData","append","imageUploadRes","fetch","method","headers","pinata_api_key","pinata_secret_api_key","body","ok","err","json","Error","error","imageData","imageCID","IpfsHash","imageURI","imageGatewayURL","metadata","name","description","image","attributes","trait_type","value","year","frame","metadataFormData","metadataBlob","Blob","JSON","stringify","type","metadataUploadRes","metadataData","metadataCID","metadataGatewayURL","console","log"],"sources":["/Users/natty/Downloads/buddha/frontend/src/utils/ipfs.js"],"sourcesContent":["export async function uploadToIPFS(form, files) {\n  const API_KEY = 'c63457916daf1874e516';\n  const API_SECRET = '27e213bcbcd8d4da78ddcc069d56515ff7770267388d93ac6bb467634bdb7175';\n\n  try {\n    // Upload image file to Pinata\n    const imageFile = files[0];\n    const imageFormData = new FormData();\n    imageFormData.append('file', imageFile);\n\n    const imageUploadRes = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {\n      method: 'POST',\n      headers: {\n        pinata_api_key: API_KEY,\n        pinata_secret_api_key: API_SECRET,\n      },\n      body: imageFormData,\n    });\n\n    if (!imageUploadRes.ok) {\n      const err = await imageUploadRes.json();\n      throw new Error(`Image upload failed: ${err.error}`);\n    }\n\n    const imageData = await imageUploadRes.json();\n    const imageCID = imageData.IpfsHash;\n    const imageURI = `ipfs://${imageCID}`;\n    const imageGatewayURL = `https://gateway.pinata.cloud/ipfs/${imageCID}`;\n\n    // Build metadata JSON object\n    const metadata = {\n      name: form.name,\n      description: form.description,\n      image: imageURI, // stored as ipfs:// but viewable via gateway\n      attributes: [\n        { trait_type: \"Year\", value: form.year },\n        { trait_type: \"Frame\", value: form.frame },\n      ],\n    };\n\n    // Upload metadata JSON to Pinata\n    const metadataFormData = new FormData();\n    const metadataBlob = new Blob([JSON.stringify(metadata)], { type: 'application/json' });\n    metadataFormData.append('file', metadataBlob, 'metadata.json');\n\n    const metadataUploadRes = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {\n      method: 'POST',\n      headers: {\n        pinata_api_key: API_KEY,\n        pinata_secret_api_key: API_SECRET,\n      },\n      body: metadataFormData,\n    });\n\n    if (!metadataUploadRes.ok) {\n      const err = await metadataUploadRes.json();\n      throw new Error(`Metadata upload failed: ${err.error}`);\n    }\n\n    const metadataData = await metadataUploadRes.json();\n    const metadataCID = metadataData.IpfsHash;\n    const metadataGatewayURL = `https://gateway.pinata.cloud/ipfs/${metadataCID}`;\n\n    console.log(\"Image IPFS:\", imageGatewayURL);\n    console.log(\"Metadata IPFS:\", metadataGatewayURL);\n\n    return metadataGatewayURL; // tokenURI to be used in mint()\n  } catch (err) {\n    console.error(\"IPFS Upload Error:\", err);\n    throw err;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}